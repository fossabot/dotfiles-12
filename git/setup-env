#!/Users/se7entyse7en/miniconda3/bin/python
import os
import subprocess
import sys


GIT_IGNORE = """# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# dotenv
.env

# virtualenv
.venv
venv/
ENV/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/

# emacs backup files
*~
"""

ENVIRONMENT = """name: {project_name}
channels:
- conda-forge
- defaults
dependencies:
- python=3.6.2=0
prefix: /Users/se7entyse7en/miniconda3/envs/{project_name}
"""

ENVIRONMENT_DEV = """name: {project_name}
channels:
- conda-forge
- defaults
dependencies:
- python=3.6.2=0
# The following dependencies are for development only
- flake8=3.3.0=py36_0
- isort=4.2.15=py36_0
prefix: /Users/se7entyse7en/miniconda3/envs/{project_name}
"""

ISORT_CFG = """[settings]
not_skip=__init__.py
force_single_line=True
order_by_type=True
lines_after_imports=2
indent='    '
atomic=True
known_first_party={project_name},tests
sections=STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
default_section=THIRDPARTY
"""

FLAKE8 = """[flake8]
max-complexity = 10
"""

README = """# {project_name}

## Installing and Running

## Environment setup for development

To setup the environment install `conda` (refer to the [documentation](https://conda.io/docs/user-guide/install/index.html)) and run the following command:

    conda env create -f environment-dev.yaml
"""

TEST_COMMAND = """if [[ "$1" == "static_checks" ]]; then
    echo "Running static checks."
    flake8 --statistics "`pwd`"
    isort -rc -c -q
elif [[ "$1" == "py" ]]; then
    echo "Running unittests."
    python -m unittest discover -c
fi
"""

COMMIT_MSGS = {
    '.gitignore': 'Added .gitignore',
    'environment.yaml': 'Added environment.yaml',
    'environment-dev.yaml': 'Added environment-dev.yaml',
    '.isort.cfg': 'Added isort configuration',
    '.flake8': 'Added flake8 configuration',
    'test.sh': 'Added command to run test',
    'README.md': 'Added README.md',
}


def git_add(path):
    subprocess.run('git add'.split(' ') + [path])


def git_commit(msg):
    subprocess.run('git commit -a -m'.split(' ') + [msg])


if __name__ == '__main__':
    p = subprocess.run('git rev-parse --show-toplevel'.split(' '),
                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stderr = p.stderr.decode().strip()
    if stderr.startswith('fatal'):
        print(stderr, file=sys.stderr)
        exit(1)

    root_dir = p.stdout.decode().strip()
    project_name = root_dir.split('/')[-1]

    for target_file, body in [
            ('.gitignore', GIT_IGNORE),
            ('environment.yaml', ENVIRONMENT),
            ('environment-dev.yaml', ENVIRONMENT_DEV),
            ('.isort.cfg', ISORT_CFG),
            ('.flake8', FLAKE8),
            ('test.sh', TEST_COMMAND),
            ('README.md', README),
    ]:
        target_path = os.path.join(root_dir, target_file)
        with open(target_path, 'wb') as fout:
            fout.write(body.format(project_name=project_name).encode())

        git_add(target_path)
        git_commit(COMMIT_MSGS[target_file])
